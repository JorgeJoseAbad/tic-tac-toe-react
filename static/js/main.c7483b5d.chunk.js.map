{"version":3,"sources":["index.js"],"names":["Intro","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","href","target","Square","props","style","color","className","onClick","value","Board","i","_this","this","myKey","key","squares","boardcols","boardRows","j","winnerArray","push","renderSquare","React","Component","Game","_this2","Object","_Users_jorgejoseabad_Ironhack_REACT_curso_tutorial_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_jorgejoseabad_Ironhack_REACT_curso_tutorial_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_jorgejoseabad_Ironhack_REACT_curso_tutorial_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","col","row","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","Math","trunc","step","status","_this3","current","winner","myWinnerArray","moves","map","move","n","desc","jumpTo","alert","handleClick","lines","winnerPack","_lines$i","_Users_jorgejoseabad_Ironhack_REACT_curso_tutorial_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c7483b5d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Intro = () =>{\n  return(\n    <div>\n      <h1>Tic-Tac-Toe</h1>\n      <b>\n        <i>A tutorial game from </i>\n        <a href=\"https://reactjs.org/tutorial/tutorial.html\"\n        target=\"_blank\">React.js</a>\n        <i> completed by </i>\n        <a href=\"https://github.com/JorgeJoseAbad\"\n        target=\"_blank\">Jorge Abad</a>\n      </b>\n      <p>Completed with five sugested improvements</p>\n      <ol>\n        <li>Display the location for each move in the format (col, row)\n          in the move history list.\n        </li>\n        <li>Bold the currently selected item in the move list.</li>\n        <li>Rewrite Board to use two loops to make the squares instead of\n          hardcoding them.\n        </li>\n        <li>When someone wins, highlight the three squares that caused the win.\n        </li>\n        <li>When no one wins, display a message about the\n        result being a draw.</li>\n      </ol>\n      <h5>Of course, this is a directed tutorial...</h5>\n      <div>But it is representative of many aspects of React that must\n      be handled. No CSS added.</div>\n      <br></br>\n\n    </div>\n  )\n}\n\n\nfunction Square (props){\n    return (\n      <button style={{color:props.color}}\n        className=\"square\"\n        onClick={() => props.onClick()}\n      >\n        {props.value}\n      </button>\n    );\n  }\n\nclass Board extends React.Component {\n\n  renderSquare(i,color) {\n    let myKey=i;\n    return <Square\n      key={myKey}\n      color={color}\n      value={this.props.squares[i]}\n      onClick={()=>this.props.onClick(i)}\n           />;\n  }\n\n  render() {\n  \tlet boardcols = [];\n  \tlet boardRows = [];\n\n  \tfor(let i = 0; i <= 2; i++) {\n      \t\tboardRows = [];\n      \t\tfor(let j = i*3+1; j <= i*3+3; j++) {\n      \t\t\t//boardRows.push(this.renderSquare(j-1)); original\n            if (this.props.winnerArray){\n               if (this.props.winnerArray[0][0]===j-1 ||\n                   this.props.winnerArray[0][1]===j-1 ||\n                   this.props.winnerArray[0][2]===j-1) {\n                     boardRows.push(this.renderSquare(j-1,'red'))}\n               else boardRows.push(this.renderSquare(j-1,'black'))\n             }\n            else boardRows.push(this.renderSquare(j-1,'black'))\n      \t\t}\n      \t\tboardcols.push(<div key={i} className=\"board-row\">{boardRows}</div>);\n    }\n\n    return (\n      <div>\n        {boardcols}\n      </div>\n    );\n  }\n} /*End Board class*/\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      history: [{\n        squares: Array(9).fill(null),\n        col:'',\n        row:''\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n     const history = this.state.history.slice(0, this.state.stepNumber + 1);\n     const current = history[history.length - 1];\n     const squares = current.squares.slice();\n     if (calculateWinner(squares) || squares[i]) {\n        return; /*squares[i] is true if is occupied by X or O*/\n      }\n     squares[i] = this.state.xIsNext ? 'X' : 'O';\n     this.setState({\n       history: history.concat([{\n          squares: squares,\n          col:i%3,\n          row:Math.trunc(i/3)\n        }]),\n        stepNumber: history.length,\n        xIsNext:!this.state.xIsNext\n     });\n}\n\njumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let myWinnerArray=null; //to send array winner\n\n    const moves = history.map((step, move) => {\n      let n=step.col+3*step.row;\n      const desc = move ?\n        `Go to move #  ${move} ;\n        col: ${step.col}; row: ${step.row};\n        element selected: ${step.squares[n]}`\n        :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner.winner;\n      myWinnerArray=winner.winnerArray;\n    }\n    else if (this.state.stepNumber===9&&winner==null) {\n      alert(\"No one win!!!\");\n      status=\"No one win!!!!\";\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div>\n        <Intro />\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              winnerArray={myWinnerArray}\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  /*lines: possibles combinations of squares to get \"tree on line\"*/\nconst lines = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nlet winnerPack={\n  winner:'',\n  winnerArray:[]\n}\nfor (let i = 0; i < lines.length; i++) {\n  const [a, b, c] = lines[i];\n  if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n    winnerPack.winnerArray.push([a,b,c]);\n    winnerPack.winner=squares[a];\n    return winnerPack;\n  }\n}\nreturn null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}